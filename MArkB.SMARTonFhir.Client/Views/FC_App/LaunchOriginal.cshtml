@model MArkB.SMARTonFhir.Client.Models.ViewModels.CernerOAuth2ViewModels

@{
  ViewBag.Title = "Cerner SMART on Fhir Launch page";
  Layout = "~/Views/Shared/_LayoutSMART.cshtml";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<!-- Required JS files to enable this page to embed within an MPage -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.26.0/polyfill.min.js'></script>
<script src='../Scripts/lib/js/cerner-smart-embeddable-lib-1.0.0.min.js'></script>
<!-- FHIR Client JS Library -->
<script src='../Scripts/lib/js/fhir-client-v0.1.12.js'></script>
<!-- Prevent session bleed caused by single threaded embedded browser and sessionStorage API -->
<!-- https://github.com/cerner/fhir-client-cerner-additions -->
<script src='../Scripts/lib/js/fhir-client-cerner-additions-1.0.0.js'></script>*


        Loading...
<div class="form-group">

    <div class="col-md-10">
        @Html.LabelFor(m => m.AuthUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.AuthUri, new { @class = "form-control" })

        @Html.LabelFor(m => m.ClientId, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.ClientId, new { @class = "form-control" })

        @Html.LabelFor(m => m.ConformanceUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.ConformanceUri, new { @class = "form-control" })

        @Html.LabelFor(m => m.LaunchContextId, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.LaunchContextId, new { @class = "form-control" })

        @Html.LabelFor(m => m.LaunchUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.LaunchUri, new { @class = "form-control" })

        @Html.LabelFor(m => m.RedirectUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.RedirectUri, new { @class = "form-control" })

        @Html.LabelFor(m => m.Scopes, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.Scopes, new { @class = "form-control" })

        @Html.LabelFor(m => m.Secret, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.Secret, new { @class = "form-control" })

        @Html.LabelFor(m => m.ServiceUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.ServiceUri, new { @class = "form-control" })

        @Html.LabelFor(m => m.TokenUri, new { @class = "col-md-2 control-label" })
        @Html.TextBoxFor(m => m.TokenUri, new { @class = "form-control" })
        

        <input name="MyValue01" id="MyValue01" /> <br />
        <input name="MyValue02" id="MyValue02" /> <br />
        <input name="MyValue03" id="MyValue03" /> <br />
        <input name="MyValue04" id="MyValue04" /> <br />

               

</div>

@* I don't know why the script reference below is here but it doesn't work without it.
    Please add a comment if you know what it does and why.*@ 
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script>
    debugger;
    // ID of the client registered with the SMART on FHIR authorization server.
    var clientId = '@Model.ClientId';

    // These parameters will be received at launch time in the URL
    var serviceUri = getUrlParameter("iss");
    var launchContextId = getUrlParameter("launch");

    ServiceUri = serviceUri;

    // The scopes that the app will request from the authorization server
    // encoded in a space-separated string:
    //      1. permission to read all of the patient's record
    //      2. permission to launch the app in the specific context
    //var scope = [
    //    "patient/Patient.read",
    //    "patient/Observation.read",
    //    "launch",
    //    "online_access",
    //    "openid",
    //    "profile",
    //].join(" ");

    var scope = '@Model.Scopes.ToString()';

    // A unique GUID session key string is generated by the Controller.
    var state = '@Model.State.ToString()';

    // To keep things flexible, let's construct the launch URL by taking the base of the
    // current URL and replace "launch.html" with "index.html".
    var launchUri = window.location.protocol + "//" + window.location.host + window.location.pathname;

    //var redirectUri = launchUri.replace("Launch", "");



      // FHIR Service Conformance Statement URL
    //This should probably be dynamic instead of hard coded.
    var conformanceUri = serviceUri + "/metadata"
    // var conformanceUri = '@Model.ConformanceUri.ToString()';

    // Let's request the conformance statement from the SMART on FHIR API server and
    // find out the endpoint URLs for the authorization server
    $.get(conformanceUri, function (r) {

          var authUri,
              tokenUri;

          var smartExtension = r.rest[0].security.extension.filter(function (e) {
              return (e.url == "http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris");
          });

          smartExtension[0].extension.forEach(function (arg, index, array) {
              if (arg.url === "authorize") {
                  authUri = arg.valueUri;
              } else if (arg.url === "token") {
                  tokenUri = arg.valueUri;
              }
          });

          // retain a couple parameters in the session for later use
          tempState = JSON.stringify({
              clientId: '@Model.ClientId',
            secret: '@Model.Secret',
              serviceUri: '@Model.ServiceUri',
            redirectUri: '@Model.RedirectUri',
              tokenUri: '@Model.TokenUri'
        })

        sessionStorage.setItem(state, tempState);
        sessionStorage.setItem(ServiceUri, serviceUri);

        document.getElementById("MyValue01").value = serviceUri;
    document.getElementById("MyValue02").value = '@Model.LaunchContextId';
    document.getElementById("MyValue03").value = launchContextId;
    document.getElementById("MyValue04").value = conformanceUri;

        //$("#@Html.IdFor(m => m.ServiceUri)").val(serviceUri);

        $("#@Html.IdFor(m => m.TokenUri)").val(tokenUri);

          // finally, redirect the browser to the authorizatin server and pass the needed
          // parameters for the authorization request in the URL
          window.location.href = authUri + "?" +
              "response_type=code&" +
              "client_id=" + encodeURIComponent('@Model.ClientId') + "&" +
              "scope=" + encodeURIComponent('@Model.Scopes') + "&" +
              "redirect_uri=" + encodeURIComponent('@Model.RedirectUri') + "&" +
              "aud=" + encodeURIComponent('@Model.ServiceUri') + "&" +
              "launch=" + '@Model.LaunchContextId' + "&" +
              "state=" + '@Model.State.ToString()';

      }, "json");

    // Convenience function for parsing of URL parameters
    // based on http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html
    function getUrlParameter(sParam)
      {
          var sPageURL = window.location.search.substring(1);
          var sURLVariables = sPageURL.split('&');
          for (var i = 0; i < sURLVariables.length; i++)
          {
              var sParameterName = sURLVariables[i].split('=');
              if (sParameterName[0] == sParam) {
                  var res = sParameterName[1].replace(/\+/g, '%20');
                  return decodeURIComponent(res);
              }
          }
      }
</script>

<div class="spinner">
    <div class="bounce1"></div>
    <div class="bounce2"></div>
    <div class="bounce3"></div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}